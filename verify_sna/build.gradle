/*
 * Copyright (c) 2022 Twilio Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'

android {
  compileSdk 32

  defaultConfig {
    minSdk 21
    targetSdk 32

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    consumerProguardFiles "consumer-rules.pro"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  // Exclude files that are in the internal package
  exclude "**/internal/**"
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

publishing {
  publications {
    verifySnaAndroid(MavenPublication) {
      groupId = 'com.twilio'
      artifactId = 'twilio-verify-sna-android'
      version = generateVersionName()
      artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
      artifact javadocJar
      artifact sourcesJar
      pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')
        configurations.implementation.allDependencies.each {
          def dependencyNode = dependenciesNode.appendNode('dependency')
          dependencyNode.appendNode('groupId', it.group)
          dependencyNode.appendNode('artifactId', it.name)
          dependencyNode.appendNode('version', it.version)
          dependencyNode.appendNode('scope', 'compile')
        }
      }
    }
  }
}

artifactory {
  contextUrl = "https://twilio.jfrog.io/artifactory"

  publish {
    repository {
      repoKey = artifactoryRepository
      username = artifactoryUsername
      password = artifactoryPassword
    }
    defaults {
      publications ('verifySnaAndroid')
      publishArtifacts = true
    }
  }
}

dependencies {
  implementation 'androidx.test:core-ktx:1.4.0'
  testImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'androidx.test.ext:junit:1.1.3'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
  testImplementation "io.mockk:mockk:1.13.2"
  testImplementation 'org.robolectric:robolectric:4.8.1'
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
  testImplementation 'com.google.truth:truth:1.1.3'
}
